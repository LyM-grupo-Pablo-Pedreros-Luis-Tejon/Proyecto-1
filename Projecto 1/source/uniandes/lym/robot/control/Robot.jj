/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi
Eliminadas producciones para manejar globos
Agregado el esqueleto para la traduccion
Modificado por Silvia Takahashi 
Re: Agregar Reglas para el manejo de globos
Modificado por Saulo Daza y Sonia Vivas
Modificado por Silvia Takahashi
Eliminadas reglas de traducci�n DE  MARCROS
Cambio del lenguaje de comandos
Modificado por Silvia Takahashi: algunas Reglas para traduccion
Modificado por Silvia Takahashi: Cambio en el lenguaje
Abril: 2008 - Simplificado apra solo interpretaci�n
 **/

options 
{
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}
	void repeat(LinkedList<LinkedList<String>> lst, int num)
	{
	  int j = 0;
	  while(j<num)
	  {
	    for(int i=0;i<lst.size();i++)
	    {
	      LinkedList<String> comm = lst.get(i);
	      String command = comm.get(0);
	      if(command.equals("move"))
	      {
	        world.moveForward(Integer.parseInt(comm.get(1)));
	      }
	      else if(command.equals("turn"))
	      {
	        if(comm.get(1).equals(":right"))
	        { 
	          world.turnRight();
	        }
	        else if(comm.get(1).equals(":left"))
	        {
	            world.turnRight();world.turnRight();world.turnRight();
	        }
	        else if(comm.get(1).equals(":around"))
	        {
	            world.turnRight();world.turnRight();
	        }
	        else
	        {
	          throw new Error("Cannot rotate.");
	        }
	      }
	      else if(command.equals("face"))
	      {
	        if(comm.get(1).equals(":north"))
	        { 
	          while(!(world.facingNorth())){world.turnRight();}
	        }
	        else if(comm.get(1).equals(":south"))
	        {
	          while(!(world.facingSouth())){world.turnRight();}
	        }
	        else if(comm.get(1).equals(":east"))
	        {
	          while(!(world.facingEast())){world.turnRight();}
	        }
	        else if(comm.get(1).equals(":west"))
	        {
	          while(!(world.facingWest())){world.turnRight();}
	        }
	        else
	        {
	          throw new Error("Cannot rotate.");
	        }
	      }
	      else if(command.equals("put"))
	      {
	        if(comm.get(1).equals(":balloons"))
	        {
	          world.putBalloons(Integer.parseInt(comm.get(2)));
	        }
	        else if(comm.get(1).equals(":chips"))
	        {
	          world.putChips(Integer.parseInt(comm.get(2)));
	        }
	        else
	        {
	          throw new Error("Cannot put.");
	        }
	      }
	      else if(command.equals("pick"))
	      {
	        if(comm.get(1).equals(":balloons"))
	        {
	          world.grabBalloons(Integer.parseInt(comm.get(2)));
	        }
	        else if(comm.get(1).equals(":chips"))
	        {
	          world.pickChips(Integer.parseInt(comm.get(2)));
	        }
	        else
	        {
	          throw new Error("Cannot pick.");
	        }
	      }
	      else if(command.equals("move-dir"))
	      {
	        if(comm.get(2).equals(":right"))
	        { 
	          world.turnRight();world.moveForward(Integer.parseInt(comm.get(1)));world.turnRight();world.turnRight();world.turnRight();
	        }
	        else if(comm.get(2).equals(":left"))
	        {
	            world.turnRight();world.turnRight();world.turnRight();world.moveForward(Integer.parseInt(comm.get(1)));world.turnRight();
	        }
	        else if(comm.get(2).equals(":front"))
	        {
	            world.moveForward(Integer.parseInt(comm.get(1)));
	        }
	        else if(comm.get(2).equals(":back"))
	        {
	            world.turnRight();world.turnRight();world.moveForward(Integer.parseInt(comm.get(1)));world.turnRight();world.turnRight();
	        }
	        else
	        {
	          throw new Error("Cannot move.");
	        }
	      }
	      else if(command.equals("move-face"))
	      {
	        if(comm.get(2).equals(":north"))
	        { 
	          while(!(world.facingNorth())){world.turnRight();}world.moveForward(Integer.parseInt(comm.get(1)));
	        }
	        else if(comm.get(2).equals(":south"))
	        {
	          while(!(world.facingSouth())){world.turnRight();}world.moveForward(Integer.parseInt(comm.get(1)));
	        }
	        else if(comm.get(2).equals(":east"))
	        {
	          while(!(world.facingEast())){world.turnRight();}world.moveForward(Integer.parseInt(comm.get(1)));
	        }
	        else if(comm.get(2).equals(":west"))
	        {
	          while(!(world.facingWest())){world.turnRight();}world.moveForward(Integer.parseInt(comm.get(1)));
	        }
	        else
	        {
	          throw new Error("Cannot move.");
	        }
	      }
	      else if(command.equals("skip"))
	      {
	       
	      }
	      else if(command.equals("run-dirs"))
	      {
	        for(int h=1;h<lst.size();h++)
	        {
	          if(comm.get(h).equals(":right"))
	        { 
	          world.turnRight();world.moveForward(1);world.turnRight();world.turnRight();world.turnRight();
	        }
	        else if(comm.get(h).equals(":left"))
	        {
	            world.turnRight();world.turnRight();world.turnRight();world.moveForward(1);world.turnRight();
	        }
	        else if(comm.get(h).equals(":front"))
	        {
	            world.moveForward(1);
	        }
	        else if(comm.get(h).equals(":back"))
	        {
	            world.turnRight();world.turnRight();world.moveForward(1);world.turnRight();world.turnRight();
	        }
	        else
	        {
	          throw new Error("Cannot move.");
	        }
	        }
	      }
	    }
	    j++;
	  }
	}

	String salida=new String();

	HashMap<String, Integer> variables = new HashMap<String, Integer>();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
//	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

		< TURN:  "turn" >
	|	< MOVE: "move" >
	|	< FACE: "face" >
	|	< PUT: "put" >
	|	< PICK: "pick" >
	|	< DEF: "defvar" >
	|   < EQUALS: "=" >
	|   < MOVEDIR: "move-dir" >
	|   < MOVEFACE: "move-face" >
	|   < RUNDIRS: "run-dirs" >
	|   < SALTAR: "skip" >
	|   < IF: "if" >
	|   < CONDICIONAL: "("("facing-p"|"can-put-p"|"can-pick-p"|"can-move-p"|"not" ("facing-p"|"can-put-p"|"can-pick-p"|"can-move-p"))")" >
	|   < REPEAT: "repeat" >
		

}

TOKEN :
{
		<T_BALLOONS:  "BALLOONS" >
		|	<T_CHIPS:     "CHIPS"  >	

}


TOKEN :
{
		<NUMERO: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
}

TOKEN :
{
		<PALABRA: (<CARACTER>)+ >
		|  	<#CARACTER: ["a"-"z"]|["A"-"Z"] >
}

	boolean command(StringBuffer sistema):
	{	
		
		int x;
		int xVariable;
		salida=new String();
		String variable;
		String variable2;
		boolean booleano;
		

		
	}
	
	{
		(
		     "(" (< TURN > (":right" {world.turnRight();salida = "Command: turnRight";}
		  |":left" {world.turnRight();world.turnRight();world.turnRight();salida = "Command: turnLeft";}
		  |":around" {world.turnRight();world.turnRight();salida = "Command: turnAround";} )
		  
		  |  < MOVE > (x=numero() {world.moveForward(x);salida = "Command: Moveforward ";}
		  |xVariable=variable() {world.moveForward(xVariable);salida = "Command: Moveforward ";})
		   
		  |  < FACE > (":north" {while(!(world.facingNorth())){world.turnRight();}salida = "Command: faceNorth ";}
		  |":south" {while(!(world.facingSouth())){world.turnRight();}salida = "Command: faceSouth ";}
		  |":east" {while(!(world.facingEast())) {world.turnRight();}salida = "Command: faceEast ";}
		  |":west" {while(!(world.facingWest())) {world.turnRight();}salida = "Command: faceWest ";})
		  
		  |  < PUT > (":balloons" (x=numero(){world.putBalloons(x);salida = "Command: putBalloons ";}|xVariable=variable() {world.putBalloons(xVariable);salida = "Command: putBalloons ";})
		  |":chips" (x=numero(){world.putChips(x);salida = "Command: putChips ";}|xVariable=variable() {world.putChips(xVariable);salida = "Command: putChips ";}))
		  
		  |  < PICK > (":balloons" (x=numero(){world.grabBalloons(x);salida = "Command: pickBalloons ";}|xVariable=variable() {world.grabBalloons(xVariable);salida = "Command: pickBalloons ";})
		  |":chips" (x=numero(){world.pickChips(x);salida = "Command: pickChips ";}|xVariable=variable() {world.pickChips(xVariable);salida = "Command: pickChips ";}))
		  
		  |  < DEF > variable=palabra() x=numero() {variables.put(variable, x); }
		  
		  |  < EQUALS > variable=palabra() x=numero() {variables.put(variable, x);}
		  
		  |  < MOVEDIR > (x=numero() (":front"{world.moveForward(x);salida = "Command: moveForward ";}|":right"{world.turnRight();world.moveForward(x);world.turnRight();world.turnRight();world.turnRight();salida = "Command: moveRight ";}|":left"{world.turnRight();world.turnRight();world.turnRight();world.moveForward(x);world.turnRight();salida = "Command: moveLeft ";}|":back"{world.turnRight();world.turnRight();world.moveForward(x);world.turnRight();world.turnRight();salida = "Command: moveBack ";})
		  |xVariable=variable() (":front"{world.moveForward(xVariable);salida = "Command: moveForward ";}|":right"{world.turnRight();world.moveForward(xVariable);world.turnRight();world.turnRight();world.turnRight();salida = "Command: moveRight ";}|":left"{world.turnRight();world.turnRight();world.turnRight();world.moveForward(xVariable);world.turnRight();salida = "Command: moveLeft ";}|":back"{world.turnRight();world.turnRight();world.moveForward(xVariable);world.turnRight();world.turnRight();salida = "Command: moveBack ";}))

		  |  < MOVEFACE > (x=numero() (":north" {while(!(world.facingNorth())){world.turnRight();}world.moveForward(x);salida = "Command: faceNorth ";}
		  |":south" {while(!(world.facingSouth())){world.turnRight();}world.moveForward(x);salida = "Command: faceSouth ";}
		  |":east" {while(!(world.facingEast())) {world.turnRight();}world.moveForward(x);salida = "Command: faceEast ";}
		  |":west" {while(!(world.facingWest())) {world.turnRight();}world.moveForward(x);salida = "Command: faceWest ";})
		  |xVariable=variable() (":north" {while(!(world.facingNorth())){world.turnRight();}world.moveForward(xVariable);salida = "Command: faceNorth ";}
		  |":south" {while(!(world.facingSouth())){world.turnRight();}world.moveForward(xVariable);salida = "Command: faceSouth ";}
		  |":east" {while(!(world.facingEast())) {world.turnRight();}world.moveForward(xVariable);salida = "Command: faceEast ";}
		  |":west" {while(!(world.facingWest())) {world.turnRight();}world.moveForward(xVariable);salida = "Command: faceWest ";}))

		  |  < RUNDIRS > "("(" :front"{world.moveForward(1);salida = " Command: runDirections ";}|" :right"{world.turnRight();world.moveForward(1);world.turnRight();world.turnRight();world.turnRight();salida = " Command: runDirections ";}
		  |" :left"{world.turnRight();world.turnRight();world.turnRight();world.moveForward(1);world.turnRight();salida = " Command: runDirections ";}|" :back"{world.turnRight();world.turnRight();world.moveForward(1);world.turnRight();world.turnRight();salida = " Command: runDirections ";}
		  | ":front"{world.moveForward(1);salida = " Command: runDirections ";}|":right"{world.turnRight();world.moveForward(1);world.turnRight();world.turnRight();world.turnRight();salida = " Command: runDirections ";}
		  |":left"{world.turnRight();world.turnRight();world.turnRight();world.moveForward(1);world.turnRight();salida = " Command: runDirections ";}|":back"{world.turnRight();world.turnRight();world.moveForward(1);world.turnRight();world.turnRight();salida = " Command: runDirections ";})+")"

		  | < SALTAR > { salida = " Command: skip "; }

		  | < REPEAT >  {LinkedList<LinkedList<String>> toRepeat = new LinkedList<LinkedList<String>>();LinkedList<String> com = new LinkedList<String>();}
		  (x=numero() (com=commandsRepeat() {toRepeat.addLast(com);})+ {repeat(toRepeat,x);salida = "Command: repeat"; }
		  |xVariable=variable() (com=commandsRepeat() {toRepeat.addLast(com);})+ {repeat(toRepeat,xVariable);salida = "Command: repeat"; })
		  )")"
		) 

		{
		  //  try {
	    	//		 Thread.sleep(1);
	    	  //   } catch (InterruptedException e) {
	    		//	        System.err.format("IOException: %s%n", e);
	    		//	    }
	    			 
			sistema.append(salida);
			return true;
		}

     |  "\n" { return true; }

		| <EOF> {return false;} 
	}

	
	

	/**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */

	int numero() throws Error:
	{	
		int total=1;
	}
	{
		<NUMERO>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("Number out of bounds: "+token.image+"!!");
			}
			return total;
		}
	}

	public String palabra():
	{
	  ;
	}
	{
		<PALABRA> {return token.image;}
	}

	int variable() throws Error:
	{	
		int total=1;
	}
	{
		<PALABRA>
		{
			try 
			{
			  for (String v: variables.keySet())
			  { 
				if (v.equals(token.image))
				{
				  total  = variables.get(token.image);
				}
			} } 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("Number out of bounds: "+token.image+"!!");
			}
			return total;
		}
	}

	LinkedList<String> commandsRepeat():
{
  int x;
  LinkedList<String> comms = new LinkedList<String>();
}
{
  "("(< MOVE > {comms.addLast(token.image);} (x=numero() | x=variable()) {comms.addLast(Integer.toString(x));}
  | < TURN > {comms.addLast(token.image);} (":right" {comms.addLast(":right");}|":left" {comms.addLast(":left");}|":around" {comms.addLast(":around");})
  | < FACE > {comms.addLast(token.image);} (":north" {comms.addLast(":north");}|":east" {comms.addLast(":east");}|":west" {comms.addLast(":west");}|":south" {comms.addLast(":south");})
  |  < PUT > {comms.addLast(token.image);} (":balloons"{comms.addLast(":balloons");}|":chips"{comms.addLast(":chips");}) (x=numero()|x=variable()) {comms.addLast(Integer.toString(x));}
  |  < PICK > {comms.addLast(token.image);} (":balloons"{comms.addLast(":balloons");}|":chips"{comms.addLast(":chips");}) (x=numero()|x=variable()) {comms.addLast(Integer.toString(x));}
  | < MOVEDIR > {comms.addLast(token.image);} (x=numero() | x=variable()) {comms.addLast(Integer.toString(x));} (":right" {comms.addLast(":right");}|":left" {comms.addLast(":left");}|":front" {comms.addLast(":front");}|":back" {comms.addLast(":back");})
  | < MOVEFACE > {comms.addLast(token.image);} (x=numero() | x=variable()) {comms.addLast(Integer.toString(x));} (":north" {comms.addLast(":north");}|":south" {comms.addLast(":south");}|":east" {comms.addLast(":east");}|":west" {comms.addLast(":west");})
  | < RUNDIRS > {comms.addLast(token.image);} "(" (":right" {comms.addLast(":right");}|":left" {comms.addLast(":left");}|":front" {comms.addLast(":front");}|":back" {comms.addLast(":back");})+ ")"
  | < SALTAR > {comms.addLast(token.image);}	  
  )")" {return comms;}

}

	
