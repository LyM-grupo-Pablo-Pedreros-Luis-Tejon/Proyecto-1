/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi
Eliminadas producciones para manejar globos
Agregado el esqueleto para la traduccion
Modificado por Silvia Takahashi 
Re: Agregar Reglas para el manejo de globos
Modificado por Saulo Daza y Sonia Vivas
Modificado por Silvia Takahashi
Eliminadas reglas de traducci�n DE  MARCROS
Cambio del lenguaje de comandos
Modificado por Silvia Takahashi: algunas Reglas para traduccion
Modificado por Silvia Takahashi: Cambio en el lenguaje
Abril: 2008 - Simplificado apra solo interpretaci�n
 **/

options 
{
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();

	HashMap<String, Integer> variables = new HashMap<String, Integer>();

	boolean condi = true;
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
//	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

		< TURN:  "turn" >
	|	< MOVE: "move" >
	|	< FACE: "face" >
	|	< PUT: "put" >
	|	< PICK: "pick" >
	|	< DEF: "defvar" >
	|   < EQUALS: "=" >
	|   < MOVEDIR: "move-dir" >
	|   < MOVEFACE: "move-face" >
	|   < RUNDIRS: "run-dirs" >
	|   < SALTAR: "skip" >
	|   < IF: "if" >
	| 	< FACING: "facing-p" >
	| 	< CANPUT: "can-put-p" >
	| 	< CANPICK: "can-pick-p" >
	| 	< CANMOVE: "can-move-p" >
	| 	< NOT: "not" >
		

}

TOKEN :
{
		<T_BALLOONS:  "BALLOONS" >
		|	<T_CHIPS:     "CHIPS"  >	

}


TOKEN :
{
		<NUMERO: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
}

TOKEN :
{
		<PALABRA: (<CARACTER>)+ >
		|  	<#CARACTER: ["a"-"z"]|["A"-"Z"] >
}

	boolean command(StringBuffer sistema) :
	{	
		
		int x;
		int xVariable;
		salida=new String();
		String variable;
		String variable2;
		boolean booleano;
		
		
	}
	
	{
		(
		     "(" (<TURN> (":right" {world.turnRight();salida = "Command: turnRight";}
		  |":left" {world.turnRight();world.turnRight();world.turnRight();salida = "Command: turnLeft";}
		  |":around" {world.turnRight();world.turnRight();salida = "Command: turnAround";} )
		  
		  |  < MOVE > (x=numero() {world.moveForward(x);salida = "Command: Moveforward ";}
		  |xVariable=variable() {world.moveForward(xVariable);salida = "Command: Moveforward ";})
		   
		  |  < FACE > (":north" {while(!(world.facingNorth())){world.turnRight();}salida = "Command: faceNorth ";}
		  |":south" {while(!(world.facingSouth())){world.turnRight();}salida = "Command: faceSouth ";}
		  |":east" {while(!(world.facingEast())) {world.turnRight();}salida = "Command: faceEast ";}
		  |":west" {while(!(world.facingWest())) {world.turnRight();}salida = "Command: faceWest ";})
		  
		  |  < PUT > (":balloons" (x=numero(){world.putBalloons(x);salida = "Command: putBalloons ";}|xVariable=variable() {world.putBalloons(xVariable);salida = "Command: putBalloons ";})
		  |":chips" (x=numero(){world.putChips(x);salida = "Command: putChips ";}|xVariable=variable() {world.putChips(xVariable);salida = "Command: putChips ";}))
		  
		  |  < PICK > (":balloons" (x=numero(){world.grabBalloons(x);salida = "Command: pickBalloons ";}|xVariable=variable() {world.grabBalloons(xVariable);salida = "Command: pickBalloons ";})
		  |":chips" (x=numero(){world.pickChips(x);salida = "Command: pickChips ";}|xVariable=variable() {world.pickChips(xVariable);salida = "Command: pickChips ";}))
		  
		  |  < DEF > variable=palabra() x=numero() {variables.put(variable, x); }
		  
		  |  < EQUALS > variable=palabra() x=numero() {variables.put(variable, x); }
		  
		  |  < MOVEDIR > (x=numero()
		  (":front"{world.moveForward(x);salida = "Command: moveForward ";}
		  |":right"{world.turnRight();world.moveForward(x);world.turnRight();world.turnRight();world.turnRight();salida = "Command: moveRight ";}
		  |":left"{world.turnRight();world.turnRight();world.turnRight();world.moveForward(x);world.turnRight();salida = "Command: moveLeft ";}
		  |":back"{world.turnRight();world.turnRight();world.moveForward(x);world.turnRight();world.turnRight();salida = "Command: moveBack ";})
		  |xVariable=variable()
		  (":front"{world.moveForward(xVariable);salida = "Command: moveForward ";}
		  |":right"{world.turnRight();world.moveForward(xVariable);world.turnRight();world.turnRight();world.turnRight();salida = "Command: moveRight ";}
		  |":left"{world.turnRight();world.turnRight();world.turnRight();world.moveForward(xVariable);world.turnRight();salida = "Command: moveLeft ";}
		  |":back"{world.turnRight();world.turnRight();world.moveForward(xVariable);world.turnRight();world.turnRight();salida = "Command: moveBack ";}))
		  |  < MOVEFACE > (x=numero() (":north" {while(!(world.facingNorth())){world.turnRight();}world.moveForward(x);salida = "Command: faceNorth ";}
		  |":south" {while(!(world.facingSouth())){world.turnRight();}world.moveForward(x);salida = "Command: faceSouth ";}
		  |":east" {while(!(world.facingEast())) {world.turnRight();}world.moveForward(x);salida = "Command: faceEast ";}
		  |":west" {while(!(world.facingWest())) {world.turnRight();}world.moveForward(x);salida = "Command: faceWest ";})
		  |xVariable=variable() (":north" {while(!(world.facingNorth())){world.turnRight();}world.moveForward(xVariable);salida = "Command: faceNorth ";}
		  |":south" {while(!(world.facingSouth())){world.turnRight();}world.moveForward(xVariable);salida = "Command: faceSouth ";}
		  |":east" {while(!(world.facingEast())) {world.turnRight();}world.moveForward(xVariable);salida = "Command: faceEast ";}
		  |":west" {while(!(world.facingWest())) {world.turnRight();}world.moveForward(xVariable);salida = "Command: faceWest ";}))
		  |  < RUNDIRS > "("(" :front"{world.moveForward(1);salida = " Command: runDirections ";}|" :right"{world.turnRight();world.moveForward(1);world.turnRight();world.turnRight();world.turnRight();salida = " Command: runDirections ";}
		  |" :left"{world.turnRight();world.turnRight();world.turnRight();world.moveForward(1);world.turnRight();salida = " Command: runDirections ";}|" :back"{world.turnRight();world.turnRight();world.moveForward(1);world.turnRight();world.turnRight();salida = " Command: runDirections ";}
		  | ":front"{world.moveForward(1);salida = " Command: runDirections ";}|":right"{world.turnRight();world.moveForward(1);world.turnRight();world.turnRight();world.turnRight();salida = " Command: runDirections ";}
		  |":left"{world.turnRight();world.turnRight();world.turnRight();world.moveForward(1);world.turnRight();salida = " Command: runDirections ";}|":back"{world.turnRight();world.turnRight();world.moveForward(1);world.turnRight();world.turnRight();salida = " Command: runDirections ";})+")"
		  | < SALTAR > { salida = " Command: skip "; }
		  | condition(sistema)
		  
		  /*| < IF > "("booleano=condicional()")"*/
		  )")"
		) 
		{
		  //  try {
	    	//		 Thread.sleep(1);
	    	  //   } catch (InterruptedException e) {
	    		//	        System.err.format("IOException: %s%n", e);
	    		//	    }
	    			 
			sistema.append(salida);
			return true;
		}
     |  "\n" { return true; }
		| <EOF> {return false;} 
	}

	boolean condition(StringBuffer sistema) :
	{	
		
		int x;
		int xVariable;
		salida=new String();
		String variable;
		String variable2;
		boolean booleano;
		
		
	}
	
	{
		(
		     "(" < FACING >
		     (":north" {
		       if (world.facingNorth())
		       {
		         condi = true;
		       }
		       else
		       {
		         condi = false;
		       }
		       ;salida = "Command: facingNorth";}
		   | ":south" {
		     if (world.facingSouth())
		       {
		         condi = true;
		       }
		       else
		       {
		         condi = false;
		       } ;salida = "Command: facingSouth"; }
		   | ":east" {
		     if (world.facingEast())
		       {
		         condi = true;
		       }
		       else
		       {
		         condi = false;
		       } ;salida = "Command: facingEast"; }
		   | ":west" {
		     if (world.facingWest())
		       {condi = true;}
		       else{condi = false;} ;salida = "Command: facingWest"; })
		   | < CANPUT >
		   (":balloons"(x=numero()
		   {try {world.putBalloons(x);world.grabBalloons(x);condi=true;} catch (Exception e) { condi=false; }
		     salida = "Command: putBalloons ";}
		   |xVariable=variable()
		   {try {world.putBalloons(xVariable);world.grabBalloons(xVariable);condi=true;} catch (Exception e) { condi=false; };salida = "Command: putBalloons ";})
		  |":chips" (x=numero()
		   {try {world.putChips(x);world.pickChips(x);condi=true;} catch (Exception e) { condi=false; }
		     salida = "Command: putBalloons ";}
		   |xVariable=variable()
		   {try {world.putChips(xVariable);world.pickChips(xVariable);condi=true;} catch (Exception e) { condi=false; };salida = "Command: putBalloons ";})
		 )
		 | < CANPICK >
		   (":balloons"(x=numero()
		   {try {world.grabBalloons(x);world.putBalloons(x);condi=true;} catch (Exception e) { condi=false; }
		     salida = "Command: putBalloons ";}
		   |xVariable=variable()
		   {try {world.grabBalloons(xVariable);world.putBalloons(xVariable);condi=true;} catch (Exception e) { condi=false; };salida = "Command: putBalloons ";})
		  |":chips" (x=numero()
		   {try {world.pickChips(x);world.putChips(x);condi=true;} catch (Exception e) { condi=false; }
		     salida = "Command: putBalloons ";}
		   |xVariable=variable()
		   {try {world.pickChips(xVariable);world.putChips(xVariable);condi=true;} catch (Exception e) { condi=false; };salida = "Command: putBalloons ";})
		 )
		 | < CANMOVE >
		   (":north"
		   {if (world.isUp()) {condi=true;}else { condi=false; }salida = "Command: canMoveNorth "; }
		 | ":south"
		   {if (world.isDown()) {condi=true;}else { condi=false; }salida = "Command: canMoveSouth "; }
		 | ":east"
		   {if (world.isRight()) {condi=true;}else { condi=false; }salida = "Command: canMoveEast "; }
		 | ":west"
		   {if (world.isLeft()) {condi=true;}else { condi=false; }salida = "Command: canMoveWest "; })
		 | < NOT > condition(sistema)
		  ")")
		{
		  //  try {
	    	//		 Thread.sleep(1);
	    	  //   } catch (InterruptedException e) {
	    		//	        System.err.format("IOException: %s%n", e);
	    		//	    }
	    			 
			sistema.append(salida);
			return true;
		}
     |  "\n" { return true; }
		| <EOF> {return false;} 
	}

	/**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */
	int numero() throws Error:
	{	
		int total=1;
	}
	{
		<NUMERO>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("Number out of bounds: "+token.image+"!!");
			}
			return total;
		}
	}

	int variable() throws Error:
	{	
		int total=1;
	}
	{
		<PALABRA>
		{
			try 
			{
			  for (String v: variables.keySet())
			  { 
				if (v.equals(token.image))
				{
				  total  = variables.get(token.image);
				}
			} } 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("Number out of bounds: "+token.image+"!!");
			}
			return total;
		}
	}

	String palabra():
	{	
	}
	{
		<PALABRA> {return token.image;}
	}
