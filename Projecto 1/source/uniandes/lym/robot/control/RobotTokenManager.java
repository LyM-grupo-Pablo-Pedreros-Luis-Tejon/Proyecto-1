/* Generated By:JavaCC: Do not edit this line. RobotTokenManager.java */
package uniandes.lym.robot.control;
import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

/** Token Manager. */
public class RobotTokenManager implements RobotConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 34;
            return 2;
         }
         if ((active0 & 0x202000L) != 0L)
         {
            jjmatchedKind = 34;
            return 36;
         }
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 34;
            return 12;
         }
         if ((active0 & 0x180L) != 0L)
         {
            jjmatchedKind = 34;
            return 41;
         }
         if ((active0 & 0x10040L) != 0L)
         {
            jjmatchedKind = 34;
            return 20;
         }
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 34;
            return 8;
         }
         if ((active0 & 0x1820L) != 0L)
         {
            jjmatchedKind = 34;
            return 46;
         }
         if ((active0 & 0xc01e0000L) != 0L)
         {
            jjmatchedKind = 34;
            return 61;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 34;
            return 14;
         }
         return -1;
      case 1:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
            return 7;
         }
         if ((active0 & 0x1820L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
            return 45;
         }
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
            return 11;
         }
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
            return 43;
         }
         if ((active0 & 0x8000L) != 0L)
            return 63;
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
            return 39;
         }
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
            return 1;
         }
         if ((active0 & 0xc01e0000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
            return 61;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
            return 35;
         }
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
            return 64;
         }
         if ((active0 & 0x10040L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
            return 19;
         }
         return -1;
      case 2:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 2;
            return 42;
         }
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 2;
            return 6;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 2;
            return 38;
         }
         if ((active0 & 0xc00e0000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 2;
            return 61;
         }
         if ((active0 & 0x10040L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 2;
            return 24;
         }
         if ((active0 & 0x100000L) != 0L)
            return 61;
         if ((active0 & 0x80L) != 0L)
            return 63;
         if ((active0 & 0x1820L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 2;
            return 50;
         }
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 2;
            return 0;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 2;
            return 34;
         }
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 2;
            return 65;
         }
         return -1;
      case 3:
         if ((active0 & 0xc0000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 3;
            }
            return 61;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 3;
            }
            return 37;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 3;
            }
            return 23;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 2;
            }
            return 33;
         }
         if ((active0 & 0x4150L) != 0L)
            return 63;
         if ((active0 & 0x1820L) != 0L)
            return 49;
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 3;
            }
            return 5;
         }
         if ((active0 & 0xe0000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x80000000L) != 0L)
            return 61;
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
            return 22;
         }
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
            return 61;
         }
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
            return 66;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
            return 64;
         }
         if ((active0 & 0xe0000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 2;
            }
            return 32;
         }
         if ((active0 & 0x1800L) != 0L)
            return 48;
         return -1;
      case 5:
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 2;
            }
            return 31;
         }
         if ((active0 & 0x200200L) != 0L)
            return 63;
         if ((active0 & 0x800L) != 0L)
            return 47;
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 5;
            return 61;
         }
         if ((active0 & 0xe0000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 5;
            return 21;
         }
         if ((active0 & 0x1000L) != 0L)
            return 54;
         return -1;
      case 6:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 6;
            return 61;
         }
         if ((active0 & 0x800L) != 0L)
            return 4;
         if ((active0 & 0x1000L) != 0L)
            return 53;
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 5;
            }
            return 10;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 2;
            }
            return 30;
         }
         if ((active0 & 0xe0000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x40000000L) != 0L)
            return 61;
         if ((active0 & 0xe0000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x12800L) != 0L)
            return 67;
         if ((active0 & 0x1000L) != 0L)
            return 17;
         return -1;
      case 8:
         if ((active0 & 0xe0000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x1000L) != 0L)
            return 67;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 46);
      case 32:
         jjmatchedKind = 1;
         return jjMoveStringLiteralDfa1_0(0x1e0000000000L);
      case 40:
         return jjStopAtPos(0, 36);
      case 41:
         return jjStopAtPos(0, 45);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x1e03f800000L);
      case 61:
         return jjStopAtPos(0, 10);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x800e0000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x10040L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1820L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x180L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x202000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10L);
      default :
         return jjMoveNfa_0(62, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa2_0(active0, 0x1e0000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x600f0040L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x12000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2200200L);
      case 70:
      case 102:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 15, 63);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x101820L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2090L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x12002000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x10140L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x14000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000200L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x88004000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x80040000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0xe2000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x48020000010L);
      case 84:
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 63);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 61);
         break;
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x1820L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0xe2000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 69:
      case 101:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 63);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000201800L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x44000010000L);
      case 75:
      case 107:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 63);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x2040000000L);
      case 78:
      case 110:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 4, 63);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x8020000000L);
      case 80:
      case 112:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 63);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000800000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x1800L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x200200L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 75:
      case 107:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(4, 40);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000010000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x20040000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000060000L);
      case 83:
      case 115:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 61);
         break;
      case 84:
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(4, 25);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(4, 26);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(4, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x1800000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 72:
      case 104:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(5, 23);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(5, 24);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x42000L);
      case 75:
      case 107:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(5, 44);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x20020000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x2040080000L);
      case 82:
      case 114:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 63);
         break;
      case 83:
      case 115:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(5, 38);
         break;
      case 84:
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 63);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(5, 27);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(5, 39);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(5, 43);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 68:
      case 100:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(6, 29);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 84:
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(6, 41);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(6, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L);
      case 80:
      case 112:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 16, 67);
         break;
      case 82:
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 11, 67);
         break;
      case 83:
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 13, 67);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 30, 61);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0xc0000L);
      case 69:
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 12, 67);
         break;
      case 80:
      case 112:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(8, 17);
         break;
      case 83:
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(8, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(9, 18);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(9, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 62;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 49:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 55;
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 62:
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 32;
                  jjCheckNAdd(60);
                  break;
               case 21:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 34:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 56:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 19:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  if ((0x800000008L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 39:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 49:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(0, 1);
                  else if ((0x1000000010000L & l) != 0L)
                     jjAddStates(2, 3);
                  else if ((0x4000000040L & l) != 0L)
                     jjAddStates(4, 5);
                  else if ((0x200000002000L & l) != 0L)
                     jjAddStates(6, 8);
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 8:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 37:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 24:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAddStates(9, 16);
                  }
                  break;
               case 48:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 11:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 62:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(0, 1);
                  else if ((0x1000000010000L & l) != 0L)
                     jjAddStates(2, 3);
                  else if ((0x4000000040L & l) != 0L)
                     jjAddStates(4, 5);
                  else if ((0x200000002000L & l) != 0L)
                     jjAddStates(6, 8);
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 42:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x80000000800L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAddStates(9, 16);
                  }
                  break;
               case 23:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 6:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 35:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 64:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x10000000100000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAddStates(9, 16);
                  }
                  break;
               case 21:
               case 61:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(61);
                  break;
               case 66:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x4000000040000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAddStates(9, 16);
                  }
                  break;
               case 14:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x4000000040L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAddStates(9, 16);
                  }
                  break;
               case 46:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 2:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 41:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  else if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 38:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 12:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 45:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  if ((0x40000000400000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 36:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 67:
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(0, 1);
                  else if ((0x1000000010000L & l) != 0L)
                     jjAddStates(2, 3);
                  else if ((0x4000000040L & l) != 0L)
                     jjAddStates(4, 5);
                  else if ((0x200000002000L & l) != 0L)
                     jjAddStates(6, 8);
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 43:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x400000004000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAddStates(9, 16);
                  }
                  break;
               case 65:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x1000000010000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAddStates(9, 16);
                  }
                  break;
               case 50:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAddStates(9, 16);
                  }
                  break;
               case 22:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 20:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 5:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 34:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(61);
                  break;
               case 63:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(61);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(0, 1);
                  else if ((0x1000000010000L & l) != 0L)
                     jjAddStates(2, 3);
                  else if ((0x4000000040L & l) != 0L)
                     jjAddStates(4, 5);
                  else if ((0x200000002000L & l) != 0L)
                     jjAddStates(6, 8);
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if ((0x4000000040000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddStates(9, 16);
                  break;
               case 9:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x1000000010000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddStates(9, 16);
                  break;
               case 13:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x200000002000L & l) != 0L)
                     jjAddStates(6, 8);
                  break;
               case 17:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddStates(9, 16);
                  break;
               case 18:
                  if ((0x4000000040L & l) != 0L)
                     jjAddStates(4, 5);
                  break;
               case 25:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(2, 3);
                  break;
               case 28:
                  if ((0x10000000100000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddStates(9, 16);
                  break;
               case 29:
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(0, 1);
                  break;
               case 30:
                  if ((0x8000000080000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddStates(9, 16);
                  break;
               case 31:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 40:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 44:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 47:
                  if ((0x20000000200L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 51:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x800000008L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 54:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 57:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 62 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   36, 40, 41, 44, 20, 26, 46, 52, 59, 3, 9, 13, 15, 16, 18, 27, 
   29, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, "\75", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\50", null, null, null, null, 
null, null, null, null, "\51", "\12", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7ff5fffffff1L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[62];
private final int[] jjstateSet = new int[124];
protected char curChar;
/** Constructor. */
public RobotTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public RobotTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 62; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 13 && (0x2200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
