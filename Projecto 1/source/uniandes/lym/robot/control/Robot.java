/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {


        private RobotWorldDec world;


        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }

        String salida=new String();

        HashMap<String, Integer> variables = new HashMap<String, Integer>();

  final public boolean command(StringBuffer sistema) throws ParseException {
                int x;
                int xVariable;
                salida=new String();
                String variable;
                String variable2;
                boolean booleano;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 22:
      jj_consume_token(22);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TURN:
        jj_consume_token(TURN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 23:
          jj_consume_token(23);
                                            world.turnRight();salida = "Command: turnRight";
          break;
        case 24:
          jj_consume_token(24);
                            world.turnRight();world.turnRight();world.turnRight();salida = "Command: turnLeft";
          break;
        case 25:
          jj_consume_token(25);
                              world.turnRight();world.turnRight();salida = "Command: turnAround";
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case MOVE:
        jj_consume_token(MOVE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMERO:
          x = numero();
                                           world.moveForward(x);salida = "Command: Moveforward ";
          break;
        case PALABRA:
          xVariable = variable();
                                         world.moveForward(xVariable);salida = "Command: Moveforward ";
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case FACE:
        jj_consume_token(FACE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 26:
          jj_consume_token(26);
                                         while(!(world.facingNorth())){world.turnRight();}salida = "Command: faceNorth ";
          break;
        case 27:
          jj_consume_token(27);
                             while(!(world.facingSouth())){world.turnRight();}salida = "Command: faceSouth ";
          break;
        case 28:
          jj_consume_token(28);
                            while(!(world.facingEast())) {world.turnRight();}salida = "Command: faceEast ";
          break;
        case 29:
          jj_consume_token(29);
                            while(!(world.facingWest())) {world.turnRight();}salida = "Command: faceWest ";
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case PUT:
        jj_consume_token(PUT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 30:
          jj_consume_token(30);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMERO:
            x = numero();
                                                      world.putBalloons(x);salida = "Command: putBalloons ";
            break;
          case PALABRA:
            xVariable = variable();
                                                                                                                                    world.putBalloons(xVariable);salida = "Command: putBalloons ";
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case 31:
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMERO:
            x = numero();
                                        world.putChips(x);salida = "Command: putChips ";
            break;
          case PALABRA:
            xVariable = variable();
                                                                                                                world.putChips(xVariable);salida = "Command: putChips ";
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case PICK:
        jj_consume_token(PICK);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 30:
          jj_consume_token(30);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMERO:
            x = numero();
                                                       world.grabBalloons(x);salida = "Command: pickBalloons ";
            break;
          case PALABRA:
            xVariable = variable();
                                                                                                                                       world.grabBalloons(xVariable);salida = "Command: pickBalloons ";
            break;
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case 31:
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMERO:
            x = numero();
                                        world.pickChips(x);salida = "Command: pickChips ";
            break;
          case PALABRA:
            xVariable = variable();
                                                                                                                  world.pickChips(xVariable);salida = "Command: pickChips ";
            break;
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case DEF:
        jj_consume_token(DEF);
        variable = palabra();
        x = numero();
                                                            variables.put(variable, x);
        break;
      case EQUALS:
        jj_consume_token(EQUALS);
        variable = palabra();
        x = numero();
                                                               variables.put(variable, x);
        break;
      case MOVEDIR:
        jj_consume_token(MOVEDIR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMERO:
          x = numero();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 32:
            jj_consume_token(32);
                                                       world.moveForward(x);salida = "Command: moveForward ";
            break;
          case 23:
            jj_consume_token(23);
                                                                                                                        world.turnRight();world.moveForward(x);world.turnRight();world.turnRight();world.turnRight();salida = "Command: moveRight ";
            break;
          case 24:
            jj_consume_token(24);
                                                                                                                                                                                                                                                              world.turnRight();world.turnRight();world.turnRight();world.moveForward(x);world.turnRight();salida = "Command: moveLeft ";
            break;
          case 33:
            jj_consume_token(33);
                                                                                                                                                                                                                                                                                                                                                                                                   world.turnRight();world.turnRight();world.moveForward(x);world.turnRight();world.turnRight();salida = "Command: moveBack ";
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case PALABRA:
          xVariable = variable();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 32:
            jj_consume_token(32);
                                                  world.moveForward(xVariable);salida = "Command: moveForward ";
            break;
          case 23:
            jj_consume_token(23);
                                                                                                                           world.turnRight();world.moveForward(xVariable);world.turnRight();world.turnRight();world.turnRight();salida = "Command: moveRight ";
            break;
          case 24:
            jj_consume_token(24);
                                                                                                                                                                                                                                                                         world.turnRight();world.turnRight();world.turnRight();world.moveForward(xVariable);world.turnRight();salida = "Command: moveLeft ";
            break;
          case 33:
            jj_consume_token(33);
                                                                                                                                                                                                                                                                                                                                                                                                                      world.turnRight();world.turnRight();world.moveForward(xVariable);world.turnRight();world.turnRight();salida = "Command: moveBack ";
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case MOVEFACE:
        jj_consume_token(MOVEFACE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMERO:
          x = numero();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 26:
            jj_consume_token(26);
                                                         while(!(world.facingNorth())){world.turnRight();}world.moveForward(x);salida = "Command: faceNorth ";
            break;
          case 27:
            jj_consume_token(27);
                             while(!(world.facingSouth())){world.turnRight();}world.moveForward(x);salida = "Command: faceSouth ";
            break;
          case 28:
            jj_consume_token(28);
                            while(!(world.facingEast())) {world.turnRight();}world.moveForward(x);salida = "Command: faceEast ";
            break;
          case 29:
            jj_consume_token(29);
                            while(!(world.facingWest())) {world.turnRight();}world.moveForward(x);salida = "Command: faceWest ";
            break;
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case PALABRA:
          xVariable = variable();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 26:
            jj_consume_token(26);
                                                   while(!(world.facingNorth())){world.turnRight();}world.moveForward(xVariable);salida = "Command: faceNorth ";
            break;
          case 27:
            jj_consume_token(27);
                             while(!(world.facingSouth())){world.turnRight();}world.moveForward(xVariable);salida = "Command: faceSouth ";
            break;
          case 28:
            jj_consume_token(28);
                            while(!(world.facingEast())) {world.turnRight();}world.moveForward(xVariable);salida = "Command: faceEast ";
            break;
          case 29:
            jj_consume_token(29);
                            while(!(world.facingWest())) {world.turnRight();}world.moveForward(xVariable);salida = "Command: faceWest ";
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case RUNDIRS:
        jj_consume_token(RUNDIRS);
        jj_consume_token(22);
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 34:
            jj_consume_token(34);
                                               world.moveForward(1);salida = " Command: runDirections ";
            break;
          case 35:
            jj_consume_token(35);
                                                                                                                    world.turnRight();world.moveForward(1);world.turnRight();world.turnRight();world.turnRight();salida = " Command: runDirections ";
            break;
          case 36:
            jj_consume_token(36);
                            world.turnRight();world.turnRight();world.turnRight();world.moveForward(1);world.turnRight();salida = " Command: runDirections ";
            break;
          case 37:
            jj_consume_token(37);
                                                                                                                                                                        world.turnRight();world.turnRight();world.moveForward(1);world.turnRight();world.turnRight();salida = " Command: runDirections ";
            break;
          case 32:
            jj_consume_token(32);
                             world.moveForward(1);salida = " Command: runDirections ";
            break;
          case 23:
            jj_consume_token(23);
                                                                                                 world.turnRight();world.moveForward(1);world.turnRight();world.turnRight();world.turnRight();salida = " Command: runDirections ";
            break;
          case 24:
            jj_consume_token(24);
                           world.turnRight();world.turnRight();world.turnRight();world.moveForward(1);world.turnRight();salida = " Command: runDirections ";
            break;
          case 33:
            jj_consume_token(33);
                                                                                                                                                                      world.turnRight();world.turnRight();world.moveForward(1);world.turnRight();world.turnRight();salida = " Command: runDirections ";
            break;
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 23:
          case 24:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
            ;
            break;
          default:
            jj_la1[16] = jj_gen;
            break label_1;
          }
        }
        jj_consume_token(38);
        break;
      case SALTAR:
        jj_consume_token(SALTAR);
                                 salida = " Command: skip ";
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(38);
                  //  try {
                //		 Thread.sleep(1);
                  //   } catch (InterruptedException e) {
                        //	        System.err.format("IOException: %s%n", e);
                        //	    }

                        sistema.append(salida);
                        {if (true) return true;}
      break;
    case 39:
      jj_consume_token(39);
               {if (true) return true;}
      break;
    case 0:
      jj_consume_token(0);
                         {if (true) return false;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

        /**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */
  final public int numero() throws ParseException, Error {
                int total=1;
    jj_consume_token(NUMERO);
                        try
                        {
                                total = Integer.parseInt(token.image);
                        }
                        catch (NumberFormatException ee)
                        {
                                // Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
                                // Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
                                {if (true) throw new Error("Number out of bounds: "+token.image+"!!");}
                        }
                        {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  final public int variable() throws ParseException, Error {
                int total=1;
    jj_consume_token(PALABRA);
                        try
                        {
                          for (String v: variables.keySet())
                          {
                                if (v.equals(token.image))
                                {
                                  total  = variables.get(token.image);
                                }
                        } }
                        catch (NumberFormatException ee)
                        {
                                // Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
                                // Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
                                {if (true) throw new Error("Number out of bounds: "+token.image+"!!");}
                        }
                        {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  final public String palabra() throws ParseException {
    jj_consume_token(PALABRA);
                           {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3800000,0x140000,0x3c000000,0x140000,0x140000,0xc0000000,0x140000,0x140000,0xc0000000,0x1800000,0x1800000,0x140000,0x3c000000,0x3c000000,0x140000,0x1800000,0x1800000,0x7ff0,0x400001,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x3f,0x3f,0x0,0x80,};
   }

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
